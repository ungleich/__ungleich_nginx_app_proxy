#!/bin/sh
#
# 2013-2017 ungleich GmbH (cdist at ungleich.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

config_name="$(cat "$__object/parameter/config")"
# Strip away any leading slashes
config="${config_name##*/}"

config_file="$__type/files/config/$config"
proxy_config="$(cat "$__type/files/config/$config")"

if [ ! -f "$config_file" ]; then
    echo "Unsupported nginx configuration: $config" >&2
    exit 1
fi

if [ -f "$__object/parameter/custom-config-from-stdin" ]; then
    custom_config="$(cat "$__object/stdin")"
else
    custom_config=""
fi

os="$(cat "$__global/explorer/os")"
case "$os" in
    centos)
        nginx_http=/etc/nginx/conf.d/http.conf
        nginx_https=/etc/nginx/conf.d/https.conf
        restart="systemctl restart nginx"

    ;;
    debian)
        nginx_http=/etc/nginx/sites-enabled/default
        nginx_https=/etc/nginx/sites-enabled/default-ssl
        restart="systemctl restart nginx"
    ;;
    devuan)
        nginx_http=/etc/nginx/sites-enabled/default
        nginx_https=/etc/nginx/sites-enabled/default-ssl
        restart="/etc/init.d/nginx restart"
    ;;
    *)
        echo "Unsupported OS: $os" >&2
        exit 1
    ;;
esac


################################################################################
# Nginx package
#
__package nginx --state present

base_config="$__type/files/base_config/${os}.conf"
require="__package/nginx" __file /etc/nginx/nginx.conf --source "$base_config" --mode 0644

require="__package/nginx" __start_on_boot nginx

################################################################################
# create base / switch to type dir
#
mkdir "$__object/files"
cd  "$__type/files"


################################################################################
# SSL / HTTPs configuration
#
if [ -f "$__object/parameter/ssl" ]; then
    if [ ! -f "$__object/parameter/ssl-cert" -o ! -f "$__object/parameter/ssl-key" ]; then
	        echo "Missing parameter" >&2
        else
            ssl_cert="$(cat "$__object/parameter/ssl-cert")"
            ssl_key="$(cat "$__object/parameter/ssl-key")"

            # create symlink for SSL certificates
            require="__package/nginx" __link /etc/nginx/ssl.crt \
            --source "$ssl_cert" --type symbolic

            require="__package/nginx" __link /etc/nginx/ssl.key \
            --source "$ssl_key" --type symbolic

            # create the https nginx config
            require="__package/nginx" __file "$nginx_https"  --owner root \
            --group root \
            --mode 0644 --source - <<EOF
#
# cdist maintained configuration - do not overwrite
#

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    ssl_certificate         /etc/nginx/ssl.crt;
    ssl_certificate_key     /etc/nginx/ssl.key;

    server_name $__target_host;

#    ssl_dhparam             /etc/nginx/dhparam.pem;

    # OCSP
    ssl_stapling on;
    ssl_stapling_verify on;

    # Chipers
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:EECDH:EDH:!MD5:!RC4:!LOW:!MEDIUM:!CAMELLIA:!ECDSA:!DES:!DSS:!3DES:!NULL;
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp384r1;

    # Add extra headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    # Session resumption
#    ssl_session_timeout 10m;
#    ssl_session_cache off;
#    ssl_session_tickets on;
#    ssl_session_ticket_key /etc/nginx/nginx-ticketkey;

    # Compress everything [tm]
#    gzip on;
#    gzip_static on;
#    gzip_proxied any;

    # Not for silly IE
    gzip_disable  "MSIE [1-6]\.";
    gzip_http_version 1.0;
    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    ${proxy_config}

    # Custom config
    ${custom_config}
}
EOF
    fi
    if [ ! -f "$__object/parameter/ssl-no-redirect" ]; then
        if [ -f "$__object/parameter/ssl-custom-redirect" ]; then
            ssl_redirect_host=$(cat "$__object/parameter/ssl-custom-redirect")
        else
            ssl_redirect_host='$host'
        fi

        ssl_redirect_file="$__object/files/nginx-redirect-http-to-https"
        echo "    rewrite ^ https://$ssl_redirect_host\$request_uri? permanent;" > "$ssl_redirect_file"
        ssl_redirect_file_content=$(cat $ssl_redirect_file)
    fi
else
    ssl_redirect_file=""
fi

################################################################################
# HTTP configuration
#
# Create HTTP configuration file

require="__package/nginx" __file "$nginx_http"  --owner root \
            --group root \
            --mode 0644 --source - <<EOF
#
# cdist maintained configuration - do not overwrite
#
upstream php-handler {
    server unix:/run/php/php7.0-fpm.sock;
}
server {
    listen 80;
    listen [::]:80;

    server_name $__target_host;

#    # Compress everything [tm]
#    gzip on;
#    gzip_static on;
#    gzip_proxied any;

    # Not for silly IE
    gzip_disable  "MSIE [1-6]\.";
    gzip_http_version 1.0;
    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    # SSL redirect
    ${ssl_redirect_file_content}

    ${proxy_config}

    # Custom config
    ${custom_config}
}
EOF
